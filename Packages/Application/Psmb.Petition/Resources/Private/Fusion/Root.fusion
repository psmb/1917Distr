prototype(Psmb.Petition:SignPlugin) < prototype(Neos.Fusion:Value) {
	@context.signatures = ${q(documentNode).children('petitions').children('[instanceof Psmb.Petition:Signature]')}
	value = Neos.Fusion:Array {
		@context.count = ${signatures.count()}
		1 = Plugin {
			package = 'Psmb.Petition'
			controller = 'Sign'
			argumentNamespace = 'sign-petition'
		}
		2 = ${'<h2 class="t-title t-title_sm">' + Translation.translate('numberJoined', null, [count], null, 'Psmb.Petition', count) + '</h2>'}
		3 = Sfi.Site:Carousel {
			isWhite = ${false}
			showDots = ${false}
			showArrows = ${true}
			slides = Neos.Fusion:Collection {
				collection = ${count > 0 && Array.reverse(signatures.filter('[selected = TRUE]').get())}
				itemName = 'node'
				itemRenderer = Sfi.Site:CarouselSlide {
					content = Psmb.Petition:SignatureSelected {
						@process.tm = ${'<div style="padding: 0 50px">' + value + '</div>'}
					}
					@process.contentElementWrapping>
				}
			}
			slidesNav.collection = ${count > 0 && Array.reverse(signatures.filter('[selected = TRUE]').get())}
			@process.tmpl = ${'<div class="">' + value + '</div>'}
		}
		4 = Neos.Fusion:Collection {
			@process.tmpl = ${'<div class="SignatureList">' + value + '</div>'}
			itemName = 'node'
			collection = ${Array.reverse(signatures.get())}
			itemRenderer = Psmb.Petition:Signature
		}
	}
	@cache {
		mode = 'cached'
		entryIdentifier.node = ${node}
		entryTags.1 = 'NodeType_Psmb.Petition:Signature'
	}
}


prototype(Psmb.Petition:SignatureSelected) < prototype(Neos.Fusion:Template) {
	templatePath = 'resource://Psmb.Petition/Private/Templates/NodeTypes/SignatureSelected.html'
	name = ${node.properties.name}
	place = ${node.properties.place}
	about = ${node.properties.about}
	comment = ${node.properties.comment}
}

prototype(Psmb.Petition:Signature) {
	name = ${q(node).property('name')}
	place = ${q(node).property('place')}
	about = ${q(node).property('about')}
	comment = ${q(node).property('comment')}
	inBackend = ${node.context.inBackend}
}


root.export {
	condition = ${request.arguments.export == '1'}
	renderer = Neos.Fusion:Http.Message {
		httpResponseHead.headers.Content-Type = 'text/csv'
		httpResponseHead.headers.Content-Disposition = 'attachment;filename=myfilename.csv'
		1 = Neos.Fusion:Collection {
			collection = ${q(documentNode).children('petitions').children('[instanceof Psmb.Petition:Signature]').get()}
			itemName = 'node'
			itemRenderer = Psmb.Petition:SignatureSelected {
				templatePath = 'resource://Psmb.Petition/Private/Templates/NodeTypes/SignatureExport.html'
				email = ${node.properties.email}
			}
		}
	}
}
root.@cache.entryIdentifier.export = ${request.arguments.export}
